{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["schema","title","type","required","properties","pr_link","language","sort","log","console","bind","App","alert","useAlert","onSubmit","data","a","formData","axios","post","show","response","message","onError","Boolean","window","location","hostname","match","alertOptions","position","positions","TOP_CENTER","timeout","offset","transition","transitions","SCALE","width","ReactDOM","render","template","AlertTemplate","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTAUMA,G,OAAS,CACXC,MAAO,+BACPC,KAAM,SACNC,SAAU,CAAC,UAAW,YACtBC,WAAY,CACRC,QAAS,CAACH,KAAM,SAAUD,MAAO,qBACjCK,SAAU,CAACJ,KAAM,SAAUD,MAAO,WAAY,KAVpC,CACd,SAAU,OAAQ,SAAU,SAAU,QAAS,cAAe,KAAM,aAAc,OAAQ,eAAgB,aAAc,MAAO,MAAO,OAAQ,SAChJM,WAYIC,EAAM,SAACN,GAAD,OAAUO,QAAQD,IAAIE,KAAKD,QAASP,IAsBjCS,MApBf,WACI,IAAMC,EAAQC,cACd,OACI,kBAAC,IAAD,CAAMb,OAAQA,EACRc,SAAQ,uCAAE,WAAOC,GAAP,iBAAAC,EAAA,6DACNP,QAAQD,IAAIO,EAAKE,UADX,kBAGIC,IAAMC,KAAK,+BAAgCJ,EAAKE,UAHpD,OAIFL,EAAMQ,KAAK,gCAJT,kDAMgB,KAAIC,SAASN,MAAQ,CAACO,QAAS,KAA1CA,EANL,EAMKA,SAEHV,EAAMQ,KAAKE,GACRV,EAAMQ,KAAK,kEAThB,yDAAF,sDAYRG,QAASf,EAAI,aC1BPgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAe,CACjBC,SAAUC,IAAUC,WACpBC,QAAS,IACTC,OAAQ,OACRC,WAAYC,IAAYC,MACxBC,MAAO,SASXC,IAASC,OALL,kBAAC,IAAD,eAAeC,SAAUC,KAAmBb,GACxC,kBAAC,EAAD,OAIgBc,SAASC,eAAe,SD2G1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f748ab52.chunk.js","sourcesContent":["import React from 'react';\nimport {useAlert} from 'react-alert';\nimport Form from \"react-jsonschema-form\";\nimport axios from 'axios';\nimport './App.css';\n\nconst languages = [\n    \"GoLang\", \"Java\", \"Python\", \"Kotlin\", \"Swift\", \"Objective C\", \"C#\", \"JavaScript\", \"Ruby\", \"Shell Script\", \"TypeScript\", \"CSS\", \"C++\", \"Rust\", \"Other\"\n].sort();\n\nconst schema = {\n    title: \"Hacktoberfest - ThoughtWorks\",\n    type: \"object\",\n    required: [\"pr_link\", \"language\"],\n    properties: {\n        pr_link: {type: \"string\", title: \"Pull Request Link\"},\n        language: {type: \"string\", title: \"Language\", \"enum\": languages}\n    }\n};\n\nconst log = (type) => console.log.bind(console, type);\n\nfunction App() {\n    const alert = useAlert();\n    return (\n        <Form schema={schema}\n              onSubmit={async (data) => {\n                  console.log(data.formData);\n                  try {\n                      await axios.post('http://localhost:3002/api/pr', data.formData);\n                      alert.show(\"Thanks for your contribution\");\n                  } catch (err) {\n                      const {message} = err.response.data || {message: ''};\n                      if (message) {\n                          alert.show(message);\n                      } else alert.show(\"Unable to save your contribution, please contact the volunteer\");\n                  }\n              }}\n              onError={log(\"errors\")}/>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {transitions, positions, Provider as AlertProvider} from 'react-alert';\nimport AlertTemplate from 'react-alert-template-basic';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst alertOptions = {\n    position: positions.TOP_CENTER,\n    timeout: 5000,\n    offset: '30px',\n    transition: transitions.SCALE,\n    width: '600px',\n};\n\nconst Root = () => (\n    <AlertProvider template={AlertTemplate} {...alertOptions}>\n        <App/>\n    </AlertProvider>\n);\n\nReactDOM.render(Root(), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}