{"ast":null,"code":"var _jsxFileName = \"/Users/akhilghatiki/OpenSource/web/src/App.js\";\nimport React from 'react';\nimport { useAlert } from 'react-alert';\nimport Form from \"react-jsonschema-form\";\nimport axios from 'axios';\nimport './App.css';\nconst languages = [\"GoLang\", \"Java\", \"Python\", \"Kotlin\", \"Swift\", \"Objective C\", \"C#\", \"JavaScript\", \"Ruby\", \"Shell Script\", \"TypeScript\", \"CSS\", \"C++\", \"Rust\", \"Other\"].sort();\nconst schema = {\n  title: \"Hacktoberfest - ThoughtWorks\",\n  type: \"object\",\n  required: [\"pr_link\", \"language\"],\n  properties: {\n    pr_link: {\n      type: \"string\",\n      title: \"Pull Request Link\"\n    },\n    language: {\n      type: \"string\",\n      title: \"Language\",\n      \"enum\": languages\n    }\n  }\n};\n\nconst log = type => console.log.bind(console, type);\n\nfunction App() {\n  const alert = useAlert();\n  return React.createElement(Form, {\n    schema: schema,\n    onSubmit: async data => {\n      console.log(data.formData);\n\n      try {\n        await axios.post('http://localhost:3002/api/pr', data.formData);\n        alert.show(\"Thanks for your contribution\");\n      } catch (err) {\n        const _ref = err.response.data || {\n          message: ''\n        },\n              message = _ref.message;\n\n        if (message) {\n          alert.show(message);\n        } else alert.show(\"Unable to save your contribution, please contact the volunteer\");\n      }\n    },\n    onError: log(\"errors\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  });\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/akhilghatiki/OpenSource/web/src/App.js"],"names":["React","useAlert","Form","axios","languages","sort","schema","title","type","required","properties","pr_link","language","log","console","bind","App","alert","data","formData","post","show","err","response","message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AAEA,MAAMC,SAAS,GAAG,CACd,QADc,EACJ,MADI,EACI,QADJ,EACc,QADd,EACwB,OADxB,EACiC,aADjC,EACgD,IADhD,EACsD,YADtD,EACoE,MADpE,EAC4E,cAD5E,EAC4F,YAD5F,EAC0G,KAD1G,EACiH,KADjH,EACwH,MADxH,EACgI,OADhI,EAEhBC,IAFgB,EAAlB;AAIA,MAAMC,MAAM,GAAG;AACXC,EAAAA,KAAK,EAAE,8BADI;AAEXC,EAAAA,IAAI,EAAE,QAFK;AAGXC,EAAAA,QAAQ,EAAE,CAAC,SAAD,EAAY,UAAZ,CAHC;AAIXC,EAAAA,UAAU,EAAE;AACRC,IAAAA,OAAO,EAAE;AAACH,MAAAA,IAAI,EAAE,QAAP;AAAiBD,MAAAA,KAAK,EAAE;AAAxB,KADD;AAERK,IAAAA,QAAQ,EAAE;AAACJ,MAAAA,IAAI,EAAE,QAAP;AAAiBD,MAAAA,KAAK,EAAE,UAAxB;AAAoC,cAAQH;AAA5C;AAFF;AAJD,CAAf;;AAUA,MAAMS,GAAG,GAAIL,IAAD,IAAUM,OAAO,CAACD,GAAR,CAAYE,IAAZ,CAAiBD,OAAjB,EAA0BN,IAA1B,CAAtB;;AAEA,SAASQ,GAAT,GAAe;AACX,QAAMC,KAAK,GAAGhB,QAAQ,EAAtB;AACA,SACI,oBAAC,IAAD;AAAM,IAAA,MAAM,EAAEK,MAAd;AACM,IAAA,QAAQ,EAAE,MAAOY,IAAP,IAAgB;AACtBJ,MAAAA,OAAO,CAACD,GAAR,CAAYK,IAAI,CAACC,QAAjB;;AACA,UAAI;AACA,cAAMhB,KAAK,CAACiB,IAAN,CAAW,8BAAX,EAA2CF,IAAI,CAACC,QAAhD,CAAN;AACAF,QAAAA,KAAK,CAACI,IAAN,CAAW,8BAAX;AACH,OAHD,CAGE,OAAOC,GAAP,EAAY;AAAA,qBACQA,GAAG,CAACC,QAAJ,CAAaL,IAAb,IAAqB;AAACM,UAAAA,OAAO,EAAE;AAAV,SAD7B;AAAA,cACHA,OADG,QACHA,OADG;;AAEV,YAAIA,OAAJ,EAAa;AACTP,UAAAA,KAAK,CAACI,IAAN,CAAWG,OAAX;AACH,SAFD,MAEOP,KAAK,CAACI,IAAN,CAAW,gEAAX;AACV;AACJ,KAZP;AAaM,IAAA,OAAO,EAAER,GAAG,CAAC,QAAD,CAblB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ;AAgBH;;AAED,eAAeG,GAAf","sourcesContent":["import React from 'react';\nimport {useAlert} from 'react-alert';\nimport Form from \"react-jsonschema-form\";\nimport axios from 'axios';\nimport './App.css';\n\nconst languages = [\n    \"GoLang\", \"Java\", \"Python\", \"Kotlin\", \"Swift\", \"Objective C\", \"C#\", \"JavaScript\", \"Ruby\", \"Shell Script\", \"TypeScript\", \"CSS\", \"C++\", \"Rust\", \"Other\"\n].sort();\n\nconst schema = {\n    title: \"Hacktoberfest - ThoughtWorks\",\n    type: \"object\",\n    required: [\"pr_link\", \"language\"],\n    properties: {\n        pr_link: {type: \"string\", title: \"Pull Request Link\"},\n        language: {type: \"string\", title: \"Language\", \"enum\": languages}\n    }\n};\n\nconst log = (type) => console.log.bind(console, type);\n\nfunction App() {\n    const alert = useAlert();\n    return (\n        <Form schema={schema}\n              onSubmit={async (data) => {\n                  console.log(data.formData);\n                  try {\n                      await axios.post('http://localhost:3002/api/pr', data.formData);\n                      alert.show(\"Thanks for your contribution\");\n                  } catch (err) {\n                      const {message} = err.response.data || {message: ''};\n                      if (message) {\n                          alert.show(message);\n                      } else alert.show(\"Unable to save your contribution, please contact the volunteer\");\n                  }\n              }}\n              onError={log(\"errors\")}/>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}